{\rtf1\ansi\ansicpg936\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 => merge config from utils/user_4splitDomains.yaml\
=> merge config from ../official_eva/configs/4splitDomains.yaml\
[2023-09-23 10:01:00 4splitDomains](iBatchLearn.py 230): INFO Full config saved to outputs/4splitDomains/mytrainer-MyTrainer-2023-09-23-10:00:57/config.json\
[2023-09-23 10:01:00 4splitDomains](iBatchLearn.py 232): INFO AGENT:\
  FIX_BN: false\
  FIX_HEAD: true\
  MODEL_NAME: resnet50\
  MODEL_TYPE: resnet\
  NAME: MyTrainer\
  REG_COEF: 0.1\
  TYPE: mytrainer\
DATASET:\
  BATCHSIZE: 64\
  NAME: 4splitDomains\
  NUM_CLASSES: 60\
  NUM_TASKS: 4\
  NUM_WORKERS: 4\
  ROOT: input/contest_data/4splitDomains\
DOMAIN_INCR: true\
GPUID:\
- 0\
LOGGER_PATH: outputs/4splitDomains/mytrainer-MyTrainer-2023-09-23-10:00:57\
OPT:\
  GAMMA: 0.1\
  LR: 0.01\
  MOMENTUM: 0.9\
  NAME: SGD\
  SCHEDULE:\
  - 200\
  WEIGHT_DECAY: 0.0\
  lr_factor: 3\
  lr_min: 0.001\
  patience_max: 4\
PRINT_FREQ: 10\
SEED: 0\
\
[2023-09-23 10:01:00 4splitDomains](iBatchLearn.py 233): INFO \{"cfg": "../official_eva/configs/4splitDomains.yaml", "user_cfg": "utils/user_4splitDomains.yaml", "test": true, "task_count": 0, "init_path": "input/init_models/4splitDomains.pth", "ckpt_path": "model_info/4splitDomains/checkpoint-0.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-23-10:00:57/prediction_0.pkl", "suffix": "2023-09-23-10:00:57", "distributed": false, "is_main_process": true\}\
[2023-09-23 10:01:00 4splitDomains](mytrainer.py 81): INFO => Load model weights: model_info/4splitDomains/checkpoint-0.pth\
[2023-09-23 10:01:01 4splitDomains](mytrainer.py 83): INFO => Load Done\
[2023-09-23 10:01:05 4splitDomains](iBatchLearn.py 57): INFO ModelSPG(\
  (feature_extractor): IncreResNet(\
    (conv1): SPG(\
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\
    )\
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
    (relu): ReLU(inplace=True)\
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\
    (layer1): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer2): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer3): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (4): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (5): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer4): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\
    (layer1.0.conv1): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.0.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.downsample.0): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.1.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.2.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv1): SPG(\
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer2.0.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.downsample.0): SPG(\
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer2.1.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.1.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.1.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.2.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.3.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv1): SPG(\
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer3.0.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.downsample.0): SPG(\
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer3.1.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.1.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.1.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.2.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.3.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.4.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.5.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv1): SPG(\
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer4.0.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.downsample.0): SPG(\
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer4.1.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.1.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.1.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.2.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
  )\
  (classifier): SPGClassifier(\
    (last): ModuleDict(\
      (All): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=60, bias=False)\
      )\
    )\
  )\
)\
[2023-09-23 10:01:05 4splitDomains](iBatchLearn.py 58): INFO #parameter of model:23630972\
[2023-09-23 10:01:05 4splitDomains](iBatchLearn.py 167): INFO test split name:0\
--------------------------------Official Evaluation--------------------------------\
0 92.6208651399491\
=> merge config from utils/user_4splitDomains.yaml\
=> merge config from ../official_eva/configs/4splitDomains.yaml\
[2023-09-23 10:01:11 4splitDomains](iBatchLearn.py 230): INFO Full config saved to outputs/4splitDomains/mytrainer-MyTrainer-2023-09-23-10:00:57/config.json\
[2023-09-23 10:01:11 4splitDomains](iBatchLearn.py 232): INFO AGENT:\
  FIX_BN: false\
  FIX_HEAD: true\
  MODEL_NAME: resnet50\
  MODEL_TYPE: resnet\
  NAME: MyTrainer\
  REG_COEF: 0.1\
  TYPE: mytrainer\
DATASET:\
  BATCHSIZE: 64\
  NAME: 4splitDomains\
  NUM_CLASSES: 60\
  NUM_TASKS: 4\
  NUM_WORKERS: 4\
  ROOT: input/contest_data/4splitDomains\
DOMAIN_INCR: true\
GPUID:\
- 0\
LOGGER_PATH: outputs/4splitDomains/mytrainer-MyTrainer-2023-09-23-10:00:57\
OPT:\
  GAMMA: 0.1\
  LR: 0.01\
  MOMENTUM: 0.9\
  NAME: SGD\
  SCHEDULE:\
  - 200\
  WEIGHT_DECAY: 0.0\
  lr_factor: 3\
  lr_min: 0.001\
  patience_max: 4\
PRINT_FREQ: 10\
SEED: 0\
\
[2023-09-23 10:01:11 4splitDomains](iBatchLearn.py 233): INFO \{"cfg": "../official_eva/configs/4splitDomains.yaml", "user_cfg": "utils/user_4splitDomains.yaml", "test": true, "task_count": 1, "init_path": "input/init_models/4splitDomains.pth", "ckpt_path": "model_info/4splitDomains/checkpoint-1.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-23-10:00:57/prediction_1.pkl", "suffix": "2023-09-23-10:00:57", "distributed": false, "is_main_process": true\}\
[2023-09-23 10:01:12 4splitDomains](mytrainer.py 81): INFO => Load model weights: model_info/4splitDomains/checkpoint-1.pth\
[2023-09-23 10:01:13 4splitDomains](mytrainer.py 83): INFO => Load Done\
[2023-09-23 10:01:17 4splitDomains](iBatchLearn.py 57): INFO ModelSPG(\
  (feature_extractor): IncreResNet(\
    (conv1): SPG(\
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\
    )\
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
    (relu): ReLU(inplace=True)\
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\
    (layer1): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer2): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer3): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (4): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (5): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer4): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\
    (layer1.0.conv1): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.0.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.downsample.0): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.1.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.2.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv1): SPG(\
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer2.0.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.downsample.0): SPG(\
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer2.1.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.1.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.1.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.2.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.3.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv1): SPG(\
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer3.0.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.downsample.0): SPG(\
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer3.1.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.1.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.1.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.2.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.3.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.4.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.5.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv1): SPG(\
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer4.0.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.downsample.0): SPG(\
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer4.1.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.1.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.1.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.2.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
  )\
  (classifier): SPGClassifier(\
    (last): ModuleDict(\
      (All): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=60, bias=False)\
      )\
    )\
  )\
)\
[2023-09-23 10:01:17 4splitDomains](iBatchLearn.py 58): INFO #parameter of model:23630972\
[2023-09-23 10:01:17 4splitDomains](iBatchLearn.py 167): INFO test split name:0\
[2023-09-23 10:01:20 4splitDomains](iBatchLearn.py 167): INFO test split name:1\
--------------------------------Official Evaluation--------------------------------\
1 67.32644068127091\
=> merge config from utils/user_4splitDomains.yaml\
=> merge config from ../official_eva/configs/4splitDomains.yaml\
[2023-09-23 10:01:26 4splitDomains](iBatchLearn.py 230): INFO Full config saved to outputs/4splitDomains/mytrainer-MyTrainer-2023-09-23-10:00:57/config.json\
[2023-09-23 10:01:26 4splitDomains](iBatchLearn.py 232): INFO AGENT:\
  FIX_BN: false\
  FIX_HEAD: true\
  MODEL_NAME: resnet50\
  MODEL_TYPE: resnet\
  NAME: MyTrainer\
  REG_COEF: 0.1\
  TYPE: mytrainer\
DATASET:\
  BATCHSIZE: 64\
  NAME: 4splitDomains\
  NUM_CLASSES: 60\
  NUM_TASKS: 4\
  NUM_WORKERS: 4\
  ROOT: input/contest_data/4splitDomains\
DOMAIN_INCR: true\
GPUID:\
- 0\
LOGGER_PATH: outputs/4splitDomains/mytrainer-MyTrainer-2023-09-23-10:00:57\
OPT:\
  GAMMA: 0.1\
  LR: 0.01\
  MOMENTUM: 0.9\
  NAME: SGD\
  SCHEDULE:\
  - 200\
  WEIGHT_DECAY: 0.0\
  lr_factor: 3\
  lr_min: 0.001\
  patience_max: 4\
PRINT_FREQ: 10\
SEED: 0\
\
[2023-09-23 10:01:26 4splitDomains](iBatchLearn.py 233): INFO \{"cfg": "../official_eva/configs/4splitDomains.yaml", "user_cfg": "utils/user_4splitDomains.yaml", "test": true, "task_count": 2, "init_path": "input/init_models/4splitDomains.pth", "ckpt_path": "model_info/4splitDomains/checkpoint-2.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-23-10:00:57/prediction_2.pkl", "suffix": "2023-09-23-10:00:57", "distributed": false, "is_main_process": true\}\
[2023-09-23 10:01:26 4splitDomains](mytrainer.py 81): INFO => Load model weights: model_info/4splitDomains/checkpoint-2.pth\
[2023-09-23 10:01:27 4splitDomains](mytrainer.py 83): INFO => Load Done\
[2023-09-23 10:01:32 4splitDomains](iBatchLearn.py 57): INFO ModelSPG(\
  (feature_extractor): IncreResNet(\
    (conv1): SPG(\
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\
    )\
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
    (relu): ReLU(inplace=True)\
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\
    (layer1): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer2): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer3): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (4): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (5): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer4): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\
    (layer1.0.conv1): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.0.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.downsample.0): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.1.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.2.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv1): SPG(\
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer2.0.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.downsample.0): SPG(\
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer2.1.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.1.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.1.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.2.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.3.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv1): SPG(\
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer3.0.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.downsample.0): SPG(\
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer3.1.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.1.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.1.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.2.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.3.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.4.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.5.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv1): SPG(\
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer4.0.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.downsample.0): SPG(\
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer4.1.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.1.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.1.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.2.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
  )\
  (classifier): SPGClassifier(\
    (last): ModuleDict(\
      (All): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=60, bias=False)\
      )\
    )\
  )\
)\
[2023-09-23 10:01:32 4splitDomains](iBatchLearn.py 58): INFO #parameter of model:23630972\
[2023-09-23 10:01:32 4splitDomains](iBatchLearn.py 167): INFO test split name:0\
[2023-09-23 10:01:35 4splitDomains](iBatchLearn.py 167): INFO test split name:1\
[2023-09-23 10:01:37 4splitDomains](iBatchLearn.py 167): INFO test split name:2\
--------------------------------Official Evaluation--------------------------------\
2 73.65984949669254\
=> merge config from utils/user_4splitDomains.yaml\
=> merge config from ../official_eva/configs/4splitDomains.yaml\
[2023-09-23 10:01:49 4splitDomains](iBatchLearn.py 230): INFO Full config saved to outputs/4splitDomains/mytrainer-MyTrainer-2023-09-23-10:00:57/config.json\
[2023-09-23 10:01:49 4splitDomains](iBatchLearn.py 232): INFO AGENT:\
  FIX_BN: false\
  FIX_HEAD: true\
  MODEL_NAME: resnet50\
  MODEL_TYPE: resnet\
  NAME: MyTrainer\
  REG_COEF: 0.1\
  TYPE: mytrainer\
DATASET:\
  BATCHSIZE: 64\
  NAME: 4splitDomains\
  NUM_CLASSES: 60\
  NUM_TASKS: 4\
  NUM_WORKERS: 4\
  ROOT: input/contest_data/4splitDomains\
DOMAIN_INCR: true\
GPUID:\
- 0\
LOGGER_PATH: outputs/4splitDomains/mytrainer-MyTrainer-2023-09-23-10:00:57\
OPT:\
  GAMMA: 0.1\
  LR: 0.01\
  MOMENTUM: 0.9\
  NAME: SGD\
  SCHEDULE:\
  - 200\
  WEIGHT_DECAY: 0.0\
  lr_factor: 3\
  lr_min: 0.001\
  patience_max: 4\
PRINT_FREQ: 10\
SEED: 0\
\
[2023-09-23 10:01:49 4splitDomains](iBatchLearn.py 233): INFO \{"cfg": "../official_eva/configs/4splitDomains.yaml", "user_cfg": "utils/user_4splitDomains.yaml", "test": true, "task_count": 3, "init_path": "input/init_models/4splitDomains.pth", "ckpt_path": "model_info/4splitDomains/checkpoint-3.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-23-10:00:57/prediction_3.pkl", "suffix": "2023-09-23-10:00:57", "distributed": false, "is_main_process": true\}\
[2023-09-23 10:01:50 4splitDomains](mytrainer.py 81): INFO => Load model weights: model_info/4splitDomains/checkpoint-3.pth\
[2023-09-23 10:01:51 4splitDomains](mytrainer.py 83): INFO => Load Done\
[2023-09-23 10:01:56 4splitDomains](iBatchLearn.py 57): INFO ModelSPG(\
  (feature_extractor): IncreResNet(\
    (conv1): SPG(\
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\
    )\
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
    (relu): ReLU(inplace=True)\
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\
    (layer1): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer2): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer3): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (4): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (5): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer4): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\
    (layer1.0.conv1): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.0.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.downsample.0): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.1.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.2.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv1): SPG(\
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer2.0.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.downsample.0): SPG(\
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer2.1.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.1.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.1.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.2.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.3.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv1): SPG(\
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer3.0.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.downsample.0): SPG(\
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer3.1.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.1.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.1.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.2.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.3.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.4.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.5.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv1): SPG(\
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer4.0.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.downsample.0): SPG(\
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer4.1.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.1.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.1.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.2.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
  )\
  (classifier): SPGClassifier(\
    (last): ModuleDict(\
      (All): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=60, bias=False)\
      )\
    )\
  )\
)\
[2023-09-23 10:01:56 4splitDomains](iBatchLearn.py 58): INFO #parameter of model:23630972\
[2023-09-23 10:01:56 4splitDomains](iBatchLearn.py 167): INFO test split name:0\
[2023-09-23 10:01:59 4splitDomains](iBatchLearn.py 167): INFO test split name:1\
[2023-09-23 10:02:01 4splitDomains](iBatchLearn.py 167): INFO test split name:2\
[2023-09-23 10:02:10 4splitDomains](iBatchLearn.py 167): INFO test split name:3\
--------------------------------Official Evaluation--------------------------------\
3 72.22493019753264\
=> merge config from utils/user_10splitTasks.yaml\
=> merge config from ../official_eva/configs/10splitTasks.yaml\
[2023-09-23 10:02:16 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57/config.json\
[2023-09-23 10:02:16 10splitTasks](iBatchLearn.py 232): INFO AGENT:\
  FIX_BN: false\
  FIX_HEAD: true\
  MODEL_NAME: resnet50\
  MODEL_TYPE: resnet\
  NAME: MyTrainer\
  REG_COEF: 0.1\
  TYPE: mytrainer\
DATASET:\
  BATCHSIZE: 64\
  NAME: 10splitTasks\
  NUM_CLASSES: 100\
  NUM_TASKS: 10\
  NUM_WORKERS: 4\
  ROOT: input/contest_data/10splitTasks\
DOMAIN_INCR: false\
GPUID:\
- 0\
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57\
OPT:\
  GAMMA: 0.1\
  LR: 0.01\
  MOMENTUM: 0.9\
  NAME: SGD\
  SCHEDULE:\
  - 200\
  WEIGHT_DECAY: 0.0\
  lr_factor: 3\
  lr_min: 0.001\
  patience_max: 4\
PRINT_FREQ: 10\
SEED: 0\
\
[2023-09-23 10:02:16 10splitTasks](iBatchLearn.py 233): INFO \{"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 0, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-0.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-23-10:00:57/prediction_0.pkl", "suffix": "2023-09-23-10:00:57", "distributed": false, "is_main_process": true\}\
[2023-09-23 10:02:17 10splitTasks](mytrainer.py 81): INFO => Load model weights: model_info/10splitTasks/checkpoint-0.pth\
[2023-09-23 10:02:18 10splitTasks](mytrainer.py 83): INFO => Load Done\
[2023-09-23 10:02:22 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(\
  (feature_extractor): IncreResNet(\
    (conv1): SPG(\
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\
    )\
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
    (relu): ReLU(inplace=True)\
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\
    (layer1): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer2): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer3): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (4): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (5): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer4): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\
    (layer1.0.conv1): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.0.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.downsample.0): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.1.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.2.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv1): SPG(\
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer2.0.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.downsample.0): SPG(\
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer2.1.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.1.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.1.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.2.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.3.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv1): SPG(\
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer3.0.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.downsample.0): SPG(\
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer3.1.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.1.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.1.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.2.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.3.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.4.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.5.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv1): SPG(\
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer4.0.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.downsample.0): SPG(\
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer4.1.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.1.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.1.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.2.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
  )\
  (classifier): SPGClassifier(\
    (last): ModuleDict(\
      (0): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (1): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (2): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (3): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (4): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (5): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (6): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (7): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (8): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (9): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
    )\
  )\
)\
[2023-09-23 10:02:22 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832\
[2023-09-23 10:02:22 10splitTasks](iBatchLearn.py 167): INFO test split name:0\
--------------------------------Official Evaluation--------------------------------\
0 85.7\
=> merge config from utils/user_10splitTasks.yaml\
=> merge config from ../official_eva/configs/10splitTasks.yaml\
[2023-09-23 10:02:30 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57/config.json\
[2023-09-23 10:02:30 10splitTasks](iBatchLearn.py 232): INFO AGENT:\
  FIX_BN: false\
  FIX_HEAD: true\
  MODEL_NAME: resnet50\
  MODEL_TYPE: resnet\
  NAME: MyTrainer\
  REG_COEF: 0.1\
  TYPE: mytrainer\
DATASET:\
  BATCHSIZE: 64\
  NAME: 10splitTasks\
  NUM_CLASSES: 100\
  NUM_TASKS: 10\
  NUM_WORKERS: 4\
  ROOT: input/contest_data/10splitTasks\
DOMAIN_INCR: false\
GPUID:\
- 0\
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57\
OPT:\
  GAMMA: 0.1\
  LR: 0.01\
  MOMENTUM: 0.9\
  NAME: SGD\
  SCHEDULE:\
  - 200\
  WEIGHT_DECAY: 0.0\
  lr_factor: 3\
  lr_min: 0.001\
  patience_max: 4\
PRINT_FREQ: 10\
SEED: 0\
\
[2023-09-23 10:02:30 10splitTasks](iBatchLearn.py 233): INFO \{"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 1, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-1.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-23-10:00:57/prediction_1.pkl", "suffix": "2023-09-23-10:00:57", "distributed": false, "is_main_process": true\}\
[2023-09-23 10:02:30 10splitTasks](mytrainer.py 81): INFO => Load model weights: model_info/10splitTasks/checkpoint-1.pth\
[2023-09-23 10:02:31 10splitTasks](mytrainer.py 83): INFO => Load Done\
optimizer_arg['params']:  <filter object at 0x7f20561d6490>\
[2023-09-23 10:02:36 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(\
  (feature_extractor): IncreResNet(\
    (conv1): SPG(\
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\
    )\
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
    (relu): ReLU(inplace=True)\
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\
    (layer1): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer2): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer3): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (4): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (5): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer4): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\
    (layer1.0.conv1): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.0.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.downsample.0): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.1.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.2.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv1): SPG(\
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer2.0.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.downsample.0): SPG(\
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer2.1.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.1.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.1.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.2.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.3.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv1): SPG(\
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer3.0.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.downsample.0): SPG(\
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer3.1.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.1.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.1.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.2.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.3.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.4.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.5.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv1): SPG(\
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer4.0.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.downsample.0): SPG(\
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer4.1.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.1.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.1.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.2.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
  )\
  (classifier): SPGClassifier(\
    (last): ModuleDict(\
      (0): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (1): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (2): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (3): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (4): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (5): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (6): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (7): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (8): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (9): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
    )\
  )\
)\
[2023-09-23 10:02:36 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832\
[2023-09-23 10:02:36 10splitTasks](iBatchLearn.py 167): INFO test split name:0\
[2023-09-23 10:02:40 10splitTasks](iBatchLearn.py 167): INFO test split name:1\
--------------------------------Official Evaluation--------------------------------\
1 71.94999999999999\
=> merge config from utils/user_10splitTasks.yaml\
=> merge config from ../official_eva/configs/10splitTasks.yaml\
[2023-09-23 10:02:46 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57/config.json\
[2023-09-23 10:02:46 10splitTasks](iBatchLearn.py 232): INFO AGENT:\
  FIX_BN: false\
  FIX_HEAD: true\
  MODEL_NAME: resnet50\
  MODEL_TYPE: resnet\
  NAME: MyTrainer\
  REG_COEF: 0.1\
  TYPE: mytrainer\
DATASET:\
  BATCHSIZE: 64\
  NAME: 10splitTasks\
  NUM_CLASSES: 100\
  NUM_TASKS: 10\
  NUM_WORKERS: 4\
  ROOT: input/contest_data/10splitTasks\
DOMAIN_INCR: false\
GPUID:\
- 0\
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57\
OPT:\
  GAMMA: 0.1\
  LR: 0.01\
  MOMENTUM: 0.9\
  NAME: SGD\
  SCHEDULE:\
  - 200\
  WEIGHT_DECAY: 0.0\
  lr_factor: 3\
  lr_min: 0.001\
  patience_max: 4\
PRINT_FREQ: 10\
SEED: 0\
\
[2023-09-23 10:02:46 10splitTasks](iBatchLearn.py 233): INFO \{"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 2, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-2.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-23-10:00:57/prediction_2.pkl", "suffix": "2023-09-23-10:00:57", "distributed": false, "is_main_process": true\}\
[2023-09-23 10:02:47 10splitTasks](mytrainer.py 81): INFO => Load model weights: model_info/10splitTasks/checkpoint-2.pth\
[2023-09-23 10:02:48 10splitTasks](mytrainer.py 83): INFO => Load Done\
optimizer_arg['params']:  <filter object at 0x7f9ee0c4e350>\
[2023-09-23 10:02:53 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(\
  (feature_extractor): IncreResNet(\
    (conv1): SPG(\
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\
    )\
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
    (relu): ReLU(inplace=True)\
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\
    (layer1): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer2): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer3): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (4): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (5): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer4): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\
    (layer1.0.conv1): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.0.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.downsample.0): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.1.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.2.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv1): SPG(\
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer2.0.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.downsample.0): SPG(\
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer2.1.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.1.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.1.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.2.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.3.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv1): SPG(\
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer3.0.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.downsample.0): SPG(\
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer3.1.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.1.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.1.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.2.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.3.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.4.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.5.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv1): SPG(\
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer4.0.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.downsample.0): SPG(\
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer4.1.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.1.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.1.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.2.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
  )\
  (classifier): SPGClassifier(\
    (last): ModuleDict(\
      (0): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (1): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (2): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (3): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (4): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (5): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (6): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (7): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (8): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (9): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
    )\
  )\
)\
[2023-09-23 10:02:53 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832\
[2023-09-23 10:02:53 10splitTasks](iBatchLearn.py 167): INFO test split name:0\
[2023-09-23 10:02:57 10splitTasks](iBatchLearn.py 167): INFO test split name:1\
[2023-09-23 10:03:00 10splitTasks](iBatchLearn.py 167): INFO test split name:2\
--------------------------------Official Evaluation--------------------------------\
2 66.25\
=> merge config from utils/user_10splitTasks.yaml\
=> merge config from ../official_eva/configs/10splitTasks.yaml\
[2023-09-23 10:03:07 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57/config.json\
[2023-09-23 10:03:07 10splitTasks](iBatchLearn.py 232): INFO AGENT:\
  FIX_BN: false\
  FIX_HEAD: true\
  MODEL_NAME: resnet50\
  MODEL_TYPE: resnet\
  NAME: MyTrainer\
  REG_COEF: 0.1\
  TYPE: mytrainer\
DATASET:\
  BATCHSIZE: 64\
  NAME: 10splitTasks\
  NUM_CLASSES: 100\
  NUM_TASKS: 10\
  NUM_WORKERS: 4\
  ROOT: input/contest_data/10splitTasks\
DOMAIN_INCR: false\
GPUID:\
- 0\
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57\
OPT:\
  GAMMA: 0.1\
  LR: 0.01\
  MOMENTUM: 0.9\
  NAME: SGD\
  SCHEDULE:\
  - 200\
  WEIGHT_DECAY: 0.0\
  lr_factor: 3\
  lr_min: 0.001\
  patience_max: 4\
PRINT_FREQ: 10\
SEED: 0\
\
[2023-09-23 10:03:07 10splitTasks](iBatchLearn.py 233): INFO \{"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 3, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-3.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-23-10:00:57/prediction_3.pkl", "suffix": "2023-09-23-10:00:57", "distributed": false, "is_main_process": true\}\
[2023-09-23 10:03:08 10splitTasks](mytrainer.py 81): INFO => Load model weights: model_info/10splitTasks/checkpoint-3.pth\
[2023-09-23 10:03:09 10splitTasks](mytrainer.py 83): INFO => Load Done\
optimizer_arg['params']:  <filter object at 0x7f944cf802d0>\
[2023-09-23 10:03:14 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(\
  (feature_extractor): IncreResNet(\
    (conv1): SPG(\
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\
    )\
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
    (relu): ReLU(inplace=True)\
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\
    (layer1): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer2): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer3): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (4): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (5): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer4): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\
    (layer1.0.conv1): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.0.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.downsample.0): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.1.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.2.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv1): SPG(\
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer2.0.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.downsample.0): SPG(\
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer2.1.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.1.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.1.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.2.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.3.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv1): SPG(\
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer3.0.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.downsample.0): SPG(\
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer3.1.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.1.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.1.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.2.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.3.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.4.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.5.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv1): SPG(\
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer4.0.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.downsample.0): SPG(\
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer4.1.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.1.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.1.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.2.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
  )\
  (classifier): SPGClassifier(\
    (last): ModuleDict(\
      (0): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (1): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (2): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (3): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (4): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (5): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (6): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (7): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (8): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (9): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
    )\
  )\
)\
[2023-09-23 10:03:14 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832\
[2023-09-23 10:03:14 10splitTasks](iBatchLearn.py 167): INFO test split name:0\
[2023-09-23 10:03:18 10splitTasks](iBatchLearn.py 167): INFO test split name:1\
[2023-09-23 10:03:21 10splitTasks](iBatchLearn.py 167): INFO test split name:2\
[2023-09-23 10:03:25 10splitTasks](iBatchLearn.py 167): INFO test split name:3\
--------------------------------Official Evaluation--------------------------------\
3 66.17499999999998\
=> merge config from utils/user_10splitTasks.yaml\
=> merge config from ../official_eva/configs/10splitTasks.yaml\
[2023-09-23 10:03:32 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57/config.json\
[2023-09-23 10:03:32 10splitTasks](iBatchLearn.py 232): INFO AGENT:\
  FIX_BN: false\
  FIX_HEAD: true\
  MODEL_NAME: resnet50\
  MODEL_TYPE: resnet\
  NAME: MyTrainer\
  REG_COEF: 0.1\
  TYPE: mytrainer\
DATASET:\
  BATCHSIZE: 64\
  NAME: 10splitTasks\
  NUM_CLASSES: 100\
  NUM_TASKS: 10\
  NUM_WORKERS: 4\
  ROOT: input/contest_data/10splitTasks\
DOMAIN_INCR: false\
GPUID:\
- 0\
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57\
OPT:\
  GAMMA: 0.1\
  LR: 0.01\
  MOMENTUM: 0.9\
  NAME: SGD\
  SCHEDULE:\
  - 200\
  WEIGHT_DECAY: 0.0\
  lr_factor: 3\
  lr_min: 0.001\
  patience_max: 4\
PRINT_FREQ: 10\
SEED: 0\
\
[2023-09-23 10:03:32 10splitTasks](iBatchLearn.py 233): INFO \{"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 4, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-4.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-23-10:00:57/prediction_4.pkl", "suffix": "2023-09-23-10:00:57", "distributed": false, "is_main_process": true\}\
[2023-09-23 10:03:32 10splitTasks](mytrainer.py 81): INFO => Load model weights: model_info/10splitTasks/checkpoint-4.pth\
[2023-09-23 10:03:34 10splitTasks](mytrainer.py 83): INFO => Load Done\
optimizer_arg['params']:  <filter object at 0x7feeba791310>\
[2023-09-23 10:03:38 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(\
  (feature_extractor): IncreResNet(\
    (conv1): SPG(\
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\
    )\
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
    (relu): ReLU(inplace=True)\
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\
    (layer1): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer2): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer3): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (4): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (5): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer4): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\
    (layer1.0.conv1): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.0.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.downsample.0): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.1.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.2.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv1): SPG(\
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer2.0.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.downsample.0): SPG(\
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer2.1.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.1.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.1.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.2.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.3.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv1): SPG(\
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer3.0.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.downsample.0): SPG(\
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer3.1.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.1.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.1.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.2.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.3.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.4.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.5.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv1): SPG(\
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer4.0.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.downsample.0): SPG(\
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer4.1.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.1.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.1.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.2.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
  )\
  (classifier): SPGClassifier(\
    (last): ModuleDict(\
      (0): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (1): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (2): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (3): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (4): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (5): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (6): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (7): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (8): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (9): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
    )\
  )\
)\
[2023-09-23 10:03:38 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832\
[2023-09-23 10:03:38 10splitTasks](iBatchLearn.py 167): INFO test split name:0\
[2023-09-23 10:03:42 10splitTasks](iBatchLearn.py 167): INFO test split name:1\
[2023-09-23 10:03:46 10splitTasks](iBatchLearn.py 167): INFO test split name:2\
[2023-09-23 10:03:49 10splitTasks](iBatchLearn.py 167): INFO test split name:3\
[2023-09-23 10:03:53 10splitTasks](iBatchLearn.py 167): INFO test split name:4\
--------------------------------Official Evaluation--------------------------------\
4 66.69999999999999\
=> merge config from utils/user_10splitTasks.yaml\
=> merge config from ../official_eva/configs/10splitTasks.yaml\
[2023-09-23 10:04:00 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57/config.json\
[2023-09-23 10:04:00 10splitTasks](iBatchLearn.py 232): INFO AGENT:\
  FIX_BN: false\
  FIX_HEAD: true\
  MODEL_NAME: resnet50\
  MODEL_TYPE: resnet\
  NAME: MyTrainer\
  REG_COEF: 0.1\
  TYPE: mytrainer\
DATASET:\
  BATCHSIZE: 64\
  NAME: 10splitTasks\
  NUM_CLASSES: 100\
  NUM_TASKS: 10\
  NUM_WORKERS: 4\
  ROOT: input/contest_data/10splitTasks\
DOMAIN_INCR: false\
GPUID:\
- 0\
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57\
OPT:\
  GAMMA: 0.1\
  LR: 0.01\
  MOMENTUM: 0.9\
  NAME: SGD\
  SCHEDULE:\
  - 200\
  WEIGHT_DECAY: 0.0\
  lr_factor: 3\
  lr_min: 0.001\
  patience_max: 4\
PRINT_FREQ: 10\
SEED: 0\
\
[2023-09-23 10:04:00 10splitTasks](iBatchLearn.py 233): INFO \{"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 5, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-5.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-23-10:00:57/prediction_5.pkl", "suffix": "2023-09-23-10:00:57", "distributed": false, "is_main_process": true\}\
[2023-09-23 10:04:00 10splitTasks](mytrainer.py 81): INFO => Load model weights: model_info/10splitTasks/checkpoint-5.pth\
[2023-09-23 10:04:01 10splitTasks](mytrainer.py 83): INFO => Load Done\
optimizer_arg['params']:  <filter object at 0x7f1125dda190>\
[2023-09-23 10:04:06 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(\
  (feature_extractor): IncreResNet(\
    (conv1): SPG(\
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\
    )\
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
    (relu): ReLU(inplace=True)\
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\
    (layer1): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer2): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer3): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (4): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (5): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer4): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\
    (layer1.0.conv1): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.0.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.downsample.0): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.1.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.2.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv1): SPG(\
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer2.0.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.downsample.0): SPG(\
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer2.1.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.1.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.1.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.2.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.3.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv1): SPG(\
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer3.0.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.downsample.0): SPG(\
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer3.1.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.1.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.1.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.2.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.3.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.4.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.5.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv1): SPG(\
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer4.0.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.downsample.0): SPG(\
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer4.1.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.1.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.1.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.2.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
  )\
  (classifier): SPGClassifier(\
    (last): ModuleDict(\
      (0): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (1): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (2): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (3): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (4): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (5): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (6): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (7): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (8): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (9): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
    )\
  )\
)\
[2023-09-23 10:04:06 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832\
[2023-09-23 10:04:06 10splitTasks](iBatchLearn.py 167): INFO test split name:0\
[2023-09-23 10:04:10 10splitTasks](iBatchLearn.py 167): INFO test split name:1\
[2023-09-23 10:04:14 10splitTasks](iBatchLearn.py 167): INFO test split name:2\
[2023-09-23 10:04:17 10splitTasks](iBatchLearn.py 167): INFO test split name:3\
[2023-09-23 10:04:21 10splitTasks](iBatchLearn.py 167): INFO test split name:4\
[2023-09-23 10:04:25 10splitTasks](iBatchLearn.py 167): INFO test split name:5\
--------------------------------Official Evaluation--------------------------------\
5 61.318616834991545\
=> merge config from utils/user_10splitTasks.yaml\
=> merge config from ../official_eva/configs/10splitTasks.yaml\
[2023-09-23 10:04:31 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57/config.json\
[2023-09-23 10:04:31 10splitTasks](iBatchLearn.py 232): INFO AGENT:\
  FIX_BN: false\
  FIX_HEAD: true\
  MODEL_NAME: resnet50\
  MODEL_TYPE: resnet\
  NAME: MyTrainer\
  REG_COEF: 0.1\
  TYPE: mytrainer\
DATASET:\
  BATCHSIZE: 64\
  NAME: 10splitTasks\
  NUM_CLASSES: 100\
  NUM_TASKS: 10\
  NUM_WORKERS: 4\
  ROOT: input/contest_data/10splitTasks\
DOMAIN_INCR: false\
GPUID:\
- 0\
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57\
OPT:\
  GAMMA: 0.1\
  LR: 0.01\
  MOMENTUM: 0.9\
  NAME: SGD\
  SCHEDULE:\
  - 200\
  WEIGHT_DECAY: 0.0\
  lr_factor: 3\
  lr_min: 0.001\
  patience_max: 4\
PRINT_FREQ: 10\
SEED: 0\
\
[2023-09-23 10:04:31 10splitTasks](iBatchLearn.py 233): INFO \{"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 6, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-6.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-23-10:00:57/prediction_6.pkl", "suffix": "2023-09-23-10:00:57", "distributed": false, "is_main_process": true\}\
[2023-09-23 10:04:32 10splitTasks](mytrainer.py 81): INFO => Load model weights: model_info/10splitTasks/checkpoint-6.pth\
[2023-09-23 10:04:33 10splitTasks](mytrainer.py 83): INFO => Load Done\
optimizer_arg['params']:  <filter object at 0x7f87d7cd2190>\
[2023-09-23 10:04:38 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(\
  (feature_extractor): IncreResNet(\
    (conv1): SPG(\
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\
    )\
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
    (relu): ReLU(inplace=True)\
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\
    (layer1): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer2): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer3): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (4): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (5): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer4): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\
    (layer1.0.conv1): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.0.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.downsample.0): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.1.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.2.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv1): SPG(\
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer2.0.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.downsample.0): SPG(\
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer2.1.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.1.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.1.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.2.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.3.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv1): SPG(\
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer3.0.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.downsample.0): SPG(\
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer3.1.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.1.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.1.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.2.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.3.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.4.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.5.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv1): SPG(\
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer4.0.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.downsample.0): SPG(\
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer4.1.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.1.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.1.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.2.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
  )\
  (classifier): SPGClassifier(\
    (last): ModuleDict(\
      (0): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (1): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (2): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (3): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (4): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (5): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (6): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (7): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (8): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (9): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
    )\
  )\
)\
[2023-09-23 10:04:38 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832\
[2023-09-23 10:04:38 10splitTasks](iBatchLearn.py 167): INFO test split name:0\
[2023-09-23 10:04:42 10splitTasks](iBatchLearn.py 167): INFO test split name:1\
[2023-09-23 10:04:45 10splitTasks](iBatchLearn.py 167): INFO test split name:2\
[2023-09-23 10:04:49 10splitTasks](iBatchLearn.py 167): INFO test split name:3\
[2023-09-23 10:04:53 10splitTasks](iBatchLearn.py 167): INFO test split name:4\
[2023-09-23 10:04:56 10splitTasks](iBatchLearn.py 167): INFO test split name:5\
[2023-09-23 10:05:00 10splitTasks](iBatchLearn.py 167): INFO test split name:6\
--------------------------------Official Evaluation--------------------------------\
6 62.16322976385572\
=> merge config from utils/user_10splitTasks.yaml\
=> merge config from ../official_eva/configs/10splitTasks.yaml\
[2023-09-23 10:05:07 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57/config.json\
[2023-09-23 10:05:07 10splitTasks](iBatchLearn.py 232): INFO AGENT:\
  FIX_BN: false\
  FIX_HEAD: true\
  MODEL_NAME: resnet50\
  MODEL_TYPE: resnet\
  NAME: MyTrainer\
  REG_COEF: 0.1\
  TYPE: mytrainer\
DATASET:\
  BATCHSIZE: 64\
  NAME: 10splitTasks\
  NUM_CLASSES: 100\
  NUM_TASKS: 10\
  NUM_WORKERS: 4\
  ROOT: input/contest_data/10splitTasks\
DOMAIN_INCR: false\
GPUID:\
- 0\
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57\
OPT:\
  GAMMA: 0.1\
  LR: 0.01\
  MOMENTUM: 0.9\
  NAME: SGD\
  SCHEDULE:\
  - 200\
  WEIGHT_DECAY: 0.0\
  lr_factor: 3\
  lr_min: 0.001\
  patience_max: 4\
PRINT_FREQ: 10\
SEED: 0\
\
[2023-09-23 10:05:07 10splitTasks](iBatchLearn.py 233): INFO \{"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 7, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-7.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-23-10:00:57/prediction_7.pkl", "suffix": "2023-09-23-10:00:57", "distributed": false, "is_main_process": true\}\
[2023-09-23 10:05:07 10splitTasks](mytrainer.py 81): INFO => Load model weights: model_info/10splitTasks/checkpoint-7.pth\
[2023-09-23 10:05:09 10splitTasks](mytrainer.py 83): INFO => Load Done\
optimizer_arg['params']:  <filter object at 0x7f999d036290>\
[2023-09-23 10:05:13 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(\
  (feature_extractor): IncreResNet(\
    (conv1): SPG(\
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\
    )\
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
    (relu): ReLU(inplace=True)\
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\
    (layer1): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer2): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer3): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (4): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (5): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer4): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\
    (layer1.0.conv1): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.0.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.downsample.0): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.1.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.2.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv1): SPG(\
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer2.0.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.downsample.0): SPG(\
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer2.1.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.1.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.1.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.2.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.3.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv1): SPG(\
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer3.0.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.downsample.0): SPG(\
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer3.1.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.1.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.1.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.2.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.3.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.4.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.5.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv1): SPG(\
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer4.0.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.downsample.0): SPG(\
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer4.1.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.1.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.1.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.2.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
  )\
  (classifier): SPGClassifier(\
    (last): ModuleDict(\
      (0): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (1): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (2): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (3): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (4): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (5): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (6): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (7): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (8): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (9): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
    )\
  )\
)\
[2023-09-23 10:05:13 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832\
[2023-09-23 10:05:13 10splitTasks](iBatchLearn.py 167): INFO test split name:0\
[2023-09-23 10:05:17 10splitTasks](iBatchLearn.py 167): INFO test split name:1\
[2023-09-23 10:05:21 10splitTasks](iBatchLearn.py 167): INFO test split name:2\
[2023-09-23 10:05:24 10splitTasks](iBatchLearn.py 167): INFO test split name:3\
[2023-09-23 10:05:28 10splitTasks](iBatchLearn.py 167): INFO test split name:4\
[2023-09-23 10:05:32 10splitTasks](iBatchLearn.py 167): INFO test split name:5\
[2023-09-23 10:05:35 10splitTasks](iBatchLearn.py 167): INFO test split name:6\
[2023-09-23 10:05:39 10splitTasks](iBatchLearn.py 167): INFO test split name:7\
--------------------------------Official Evaluation--------------------------------\
7 61.18629473741862\
=> merge config from utils/user_10splitTasks.yaml\
=> merge config from ../official_eva/configs/10splitTasks.yaml\
[2023-09-23 10:05:46 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57/config.json\
[2023-09-23 10:05:46 10splitTasks](iBatchLearn.py 232): INFO AGENT:\
  FIX_BN: false\
  FIX_HEAD: true\
  MODEL_NAME: resnet50\
  MODEL_TYPE: resnet\
  NAME: MyTrainer\
  REG_COEF: 0.1\
  TYPE: mytrainer\
DATASET:\
  BATCHSIZE: 64\
  NAME: 10splitTasks\
  NUM_CLASSES: 100\
  NUM_TASKS: 10\
  NUM_WORKERS: 4\
  ROOT: input/contest_data/10splitTasks\
DOMAIN_INCR: false\
GPUID:\
- 0\
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57\
OPT:\
  GAMMA: 0.1\
  LR: 0.01\
  MOMENTUM: 0.9\
  NAME: SGD\
  SCHEDULE:\
  - 200\
  WEIGHT_DECAY: 0.0\
  lr_factor: 3\
  lr_min: 0.001\
  patience_max: 4\
PRINT_FREQ: 10\
SEED: 0\
\
[2023-09-23 10:05:46 10splitTasks](iBatchLearn.py 233): INFO \{"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 8, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-8.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-23-10:00:57/prediction_8.pkl", "suffix": "2023-09-23-10:00:57", "distributed": false, "is_main_process": true\}\
[2023-09-23 10:05:46 10splitTasks](mytrainer.py 81): INFO => Load model weights: model_info/10splitTasks/checkpoint-8.pth\
[2023-09-23 10:05:48 10splitTasks](mytrainer.py 83): INFO => Load Done\
optimizer_arg['params']:  <filter object at 0x7f0cf968f390>\
[2023-09-23 10:05:52 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(\
  (feature_extractor): IncreResNet(\
    (conv1): SPG(\
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\
    )\
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
    (relu): ReLU(inplace=True)\
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\
    (layer1): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer2): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer3): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (4): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (5): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer4): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\
    (layer1.0.conv1): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.0.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.downsample.0): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.1.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.2.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv1): SPG(\
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer2.0.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.downsample.0): SPG(\
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer2.1.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.1.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.1.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.2.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.3.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv1): SPG(\
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer3.0.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.downsample.0): SPG(\
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer3.1.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.1.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.1.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.2.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.3.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.4.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.5.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv1): SPG(\
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer4.0.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.downsample.0): SPG(\
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer4.1.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.1.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.1.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.2.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
  )\
  (classifier): SPGClassifier(\
    (last): ModuleDict(\
      (0): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (1): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (2): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (3): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (4): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (5): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (6): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (7): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (8): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (9): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
    )\
  )\
)\
[2023-09-23 10:05:52 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832\
[2023-09-23 10:05:52 10splitTasks](iBatchLearn.py 167): INFO test split name:0\
[2023-09-23 10:05:56 10splitTasks](iBatchLearn.py 167): INFO test split name:1\
[2023-09-23 10:06:00 10splitTasks](iBatchLearn.py 167): INFO test split name:2\
[2023-09-23 10:06:03 10splitTasks](iBatchLearn.py 167): INFO test split name:3\
[2023-09-23 10:06:07 10splitTasks](iBatchLearn.py 167): INFO test split name:4\
[2023-09-23 10:06:11 10splitTasks](iBatchLearn.py 167): INFO test split name:5\
[2023-09-23 10:06:15 10splitTasks](iBatchLearn.py 167): INFO test split name:6\
[2023-09-23 10:06:18 10splitTasks](iBatchLearn.py 167): INFO test split name:7\
[2023-09-23 10:06:22 10splitTasks](iBatchLearn.py 167): INFO test split name:8\
--------------------------------Official Evaluation--------------------------------\
8 63.46709814247327\
=> merge config from utils/user_10splitTasks.yaml\
=> merge config from ../official_eva/configs/10splitTasks.yaml\
[2023-09-23 10:06:29 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57/config.json\
[2023-09-23 10:06:29 10splitTasks](iBatchLearn.py 232): INFO AGENT:\
  FIX_BN: false\
  FIX_HEAD: true\
  MODEL_NAME: resnet50\
  MODEL_TYPE: resnet\
  NAME: MyTrainer\
  REG_COEF: 0.1\
  TYPE: mytrainer\
DATASET:\
  BATCHSIZE: 64\
  NAME: 10splitTasks\
  NUM_CLASSES: 100\
  NUM_TASKS: 10\
  NUM_WORKERS: 4\
  ROOT: input/contest_data/10splitTasks\
DOMAIN_INCR: false\
GPUID:\
- 0\
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-23-10:00:57\
OPT:\
  GAMMA: 0.1\
  LR: 0.01\
  MOMENTUM: 0.9\
  NAME: SGD\
  SCHEDULE:\
  - 200\
  WEIGHT_DECAY: 0.0\
  lr_factor: 3\
  lr_min: 0.001\
  patience_max: 4\
PRINT_FREQ: 10\
SEED: 0\
\
[2023-09-23 10:06:29 10splitTasks](iBatchLearn.py 233): INFO \{"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 9, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-9.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-23-10:00:57/prediction_9.pkl", "suffix": "2023-09-23-10:00:57", "distributed": false, "is_main_process": true\}\
[2023-09-23 10:06:29 10splitTasks](mytrainer.py 81): INFO => Load model weights: model_info/10splitTasks/checkpoint-9.pth\
[2023-09-23 10:06:31 10splitTasks](mytrainer.py 83): INFO => Load Done\
optimizer_arg['params']:  <filter object at 0x7ff294e40490>\
[2023-09-23 10:06:35 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(\
  (feature_extractor): IncreResNet(\
    (conv1): SPG(\
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\
    )\
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
    (relu): ReLU(inplace=True)\
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\
    (layer1): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer2): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer3): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (3): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (4): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (5): Bottleneck(\
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (layer4): Sequential(\
      (0): Bottleneck(\
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
        (downsample): Sequential(\
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        )\
      )\
      (1): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
      (2): Bottleneck(\
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\
        (relu): ReLU(inplace=True)\
      )\
    )\
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\
    (layer1.0.conv1): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.0.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.0.downsample.0): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.1.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.1.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv1): SPG(\
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer1.2.conv2): SPG(\
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer1.2.conv3): SPG(\
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv1): SPG(\
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer2.0.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.0.downsample.0): SPG(\
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer2.1.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.1.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.1.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.2.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.2.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv1): SPG(\
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer2.3.conv2): SPG(\
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer2.3.conv3): SPG(\
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv1): SPG(\
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer3.0.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.0.downsample.0): SPG(\
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer3.1.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.1.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.1.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.2.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.2.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.3.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.3.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.4.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.4.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv1): SPG(\
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer3.5.conv2): SPG(\
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer3.5.conv3): SPG(\
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv1): SPG(\
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\
    )\
    (layer4.0.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.0.downsample.0): SPG(\
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\
    )\
    (layer4.1.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.1.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.1.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv1): SPG(\
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
    (layer4.2.conv2): SPG(\
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\
    )\
    (layer4.2.conv3): SPG(\
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\
    )\
  )\
  (classifier): SPGClassifier(\
    (last): ModuleDict(\
      (0): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (1): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (2): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (3): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (4): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (5): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (6): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (7): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (8): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
      (9): _TaskHead(\
        (classifier): Linear(in_features=2048, out_features=10, bias=False)\
      )\
    )\
  )\
)\
[2023-09-23 10:06:35 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832\
[2023-09-23 10:06:35 10splitTasks](iBatchLearn.py 167): INFO test split name:0\
[2023-09-23 10:06:39 10splitTasks](iBatchLearn.py 167): INFO test split name:1\
[2023-09-23 10:06:43 10splitTasks](iBatchLearn.py 167): INFO test split name:2\
[2023-09-23 10:06:46 10splitTasks](iBatchLearn.py 167): INFO test split name:3\
[2023-09-23 10:06:50 10splitTasks](iBatchLearn.py 167): INFO test split name:4\
[2023-09-23 10:06:54 10splitTasks](iBatchLearn.py 167): INFO test split name:5\
[2023-09-23 10:06:57 10splitTasks](iBatchLearn.py 167): INFO test split name:6\
[2023-09-23 10:07:01 10splitTasks](iBatchLearn.py 167): INFO test split name:7\
[2023-09-23 10:07:05 10splitTasks](iBatchLearn.py 167): INFO test split name:8\
[2023-09-23 10:07:08 10splitTasks](iBatchLearn.py 167): INFO test split name:9\
--------------------------------Official Evaluation--------------------------------\
9 58.45881390968696\
--------------------------------Final Official Evaluation--------------------------------\
65.3418720536098\
}