=> merge config from utils/user_4splitDomains.yaml
=> merge config from ../official_eva/configs/4splitDomains.yaml
[2023-09-20 14:52:20 4splitDomains](iBatchLearn.py 230): INFO Full config saved to outputs/4splitDomains/mytrainer-MyTrainer-2023-09-20-14:52:16/config.json
[2023-09-20 14:52:20 4splitDomains](iBatchLearn.py 232): INFO AGENT:
  FIX_BN: false
  FIX_HEAD: true
  MODEL_NAME: resnet50
  MODEL_TYPE: resnet
  NAME: MyTrainer
  REG_COEF: 0.1
  TYPE: mytrainer
DATASET:
  BATCHSIZE: 64
  NAME: 4splitDomains
  NUM_CLASSES: 60
  NUM_TASKS: 4
  NUM_WORKERS: 4
  ROOT: input/contest_data/4splitDomains
DOMAIN_INCR: true
GPUID:
- 0
LOGGER_PATH: outputs/4splitDomains/mytrainer-MyTrainer-2023-09-20-14:52:16
OPT:
  GAMMA: 0.1
  LR: 0.01
  MOMENTUM: 0.9
  NAME: SGD
  SCHEDULE:
  - 200
  WEIGHT_DECAY: 0.0
  lr_factor: 3
  lr_min: 0.001
  patience_max: 4
PRINT_FREQ: 10
SEED: 0

[2023-09-20 14:52:20 4splitDomains](iBatchLearn.py 233): INFO {"cfg": "../official_eva/configs/4splitDomains.yaml", "user_cfg": "utils/user_4splitDomains.yaml", "test": true, "task_count": 0, "init_path": "input/init_models/4splitDomains.pth", "ckpt_path": "model_info/4splitDomains/checkpoint-0.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-20-14:52:16/prediction_0.pkl", "suffix": "2023-09-20-14:52:16", "distributed": false, "is_main_process": true}
[2023-09-20 14:52:20 4splitDomains](mytrainer.py 46): INFO => Load model weights: model_info/4splitDomains/checkpoint-0.pth
[2023-09-20 14:52:22 4splitDomains](mytrainer.py 48): INFO => Load Done
[2023-09-20 14:52:26 4splitDomains](iBatchLearn.py 57): INFO ModelSPG(
  (feature_extractor): IncreResNet(
    (conv1): SPG(
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    )
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (layer1.0.conv1): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.0.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.downsample.0): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.1.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.2.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv1): SPG(
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer2.0.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.downsample.0): SPG(
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer2.1.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.1.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.1.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.2.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.3.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv1): SPG(
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer3.0.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.downsample.0): SPG(
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer3.1.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.1.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.1.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.2.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.3.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.4.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.5.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv1): SPG(
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer4.0.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.downsample.0): SPG(
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer4.1.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.1.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.1.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.2.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (classifier): SPGClassifier(
    (last): ModuleDict(
      (All): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=60, bias=False)
      )
    )
  )
)
[2023-09-20 14:52:26 4splitDomains](iBatchLearn.py 58): INFO #parameter of model:23630972
[2023-09-20 14:52:26 4splitDomains](iBatchLearn.py 167): INFO test split name:0
--------------------------------Official Evaluation--------------------------------
0 92.6208651399491
=> merge config from utils/user_4splitDomains.yaml
=> merge config from ../official_eva/configs/4splitDomains.yaml
[2023-09-20 14:52:33 4splitDomains](iBatchLearn.py 230): INFO Full config saved to outputs/4splitDomains/mytrainer-MyTrainer-2023-09-20-14:52:16/config.json
[2023-09-20 14:52:33 4splitDomains](iBatchLearn.py 232): INFO AGENT:
  FIX_BN: false
  FIX_HEAD: true
  MODEL_NAME: resnet50
  MODEL_TYPE: resnet
  NAME: MyTrainer
  REG_COEF: 0.1
  TYPE: mytrainer
DATASET:
  BATCHSIZE: 64
  NAME: 4splitDomains
  NUM_CLASSES: 60
  NUM_TASKS: 4
  NUM_WORKERS: 4
  ROOT: input/contest_data/4splitDomains
DOMAIN_INCR: true
GPUID:
- 0
LOGGER_PATH: outputs/4splitDomains/mytrainer-MyTrainer-2023-09-20-14:52:16
OPT:
  GAMMA: 0.1
  LR: 0.01
  MOMENTUM: 0.9
  NAME: SGD
  SCHEDULE:
  - 200
  WEIGHT_DECAY: 0.0
  lr_factor: 3
  lr_min: 0.001
  patience_max: 4
PRINT_FREQ: 10
SEED: 0

[2023-09-20 14:52:33 4splitDomains](iBatchLearn.py 233): INFO {"cfg": "../official_eva/configs/4splitDomains.yaml", "user_cfg": "utils/user_4splitDomains.yaml", "test": true, "task_count": 1, "init_path": "input/init_models/4splitDomains.pth", "ckpt_path": "model_info/4splitDomains/checkpoint-1.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-20-14:52:16/prediction_1.pkl", "suffix": "2023-09-20-14:52:16", "distributed": false, "is_main_process": true}
[2023-09-20 14:52:33 4splitDomains](mytrainer.py 46): INFO => Load model weights: model_info/4splitDomains/checkpoint-1.pth
[2023-09-20 14:52:35 4splitDomains](mytrainer.py 48): INFO => Load Done
[2023-09-20 14:52:40 4splitDomains](iBatchLearn.py 57): INFO ModelSPG(
  (feature_extractor): IncreResNet(
    (conv1): SPG(
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    )
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (layer1.0.conv1): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.0.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.downsample.0): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.1.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.2.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv1): SPG(
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer2.0.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.downsample.0): SPG(
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer2.1.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.1.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.1.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.2.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.3.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv1): SPG(
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer3.0.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.downsample.0): SPG(
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer3.1.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.1.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.1.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.2.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.3.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.4.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.5.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv1): SPG(
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer4.0.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.downsample.0): SPG(
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer4.1.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.1.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.1.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.2.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (classifier): SPGClassifier(
    (last): ModuleDict(
      (All): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=60, bias=False)
      )
    )
  )
)
[2023-09-20 14:52:40 4splitDomains](iBatchLearn.py 58): INFO #parameter of model:23630972
[2023-09-20 14:52:40 4splitDomains](iBatchLearn.py 167): INFO test split name:0
[2023-09-20 14:52:43 4splitDomains](iBatchLearn.py 167): INFO test split name:1
--------------------------------Official Evaluation--------------------------------
1 67.32644068127091
=> merge config from utils/user_4splitDomains.yaml
=> merge config from ../official_eva/configs/4splitDomains.yaml
[2023-09-20 14:52:49 4splitDomains](iBatchLearn.py 230): INFO Full config saved to outputs/4splitDomains/mytrainer-MyTrainer-2023-09-20-14:52:16/config.json
[2023-09-20 14:52:49 4splitDomains](iBatchLearn.py 232): INFO AGENT:
  FIX_BN: false
  FIX_HEAD: true
  MODEL_NAME: resnet50
  MODEL_TYPE: resnet
  NAME: MyTrainer
  REG_COEF: 0.1
  TYPE: mytrainer
DATASET:
  BATCHSIZE: 64
  NAME: 4splitDomains
  NUM_CLASSES: 60
  NUM_TASKS: 4
  NUM_WORKERS: 4
  ROOT: input/contest_data/4splitDomains
DOMAIN_INCR: true
GPUID:
- 0
LOGGER_PATH: outputs/4splitDomains/mytrainer-MyTrainer-2023-09-20-14:52:16
OPT:
  GAMMA: 0.1
  LR: 0.01
  MOMENTUM: 0.9
  NAME: SGD
  SCHEDULE:
  - 200
  WEIGHT_DECAY: 0.0
  lr_factor: 3
  lr_min: 0.001
  patience_max: 4
PRINT_FREQ: 10
SEED: 0

[2023-09-20 14:52:49 4splitDomains](iBatchLearn.py 233): INFO {"cfg": "../official_eva/configs/4splitDomains.yaml", "user_cfg": "utils/user_4splitDomains.yaml", "test": true, "task_count": 2, "init_path": "input/init_models/4splitDomains.pth", "ckpt_path": "model_info/4splitDomains/checkpoint-2.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-20-14:52:16/prediction_2.pkl", "suffix": "2023-09-20-14:52:16", "distributed": false, "is_main_process": true}
[2023-09-20 14:52:50 4splitDomains](mytrainer.py 46): INFO => Load model weights: model_info/4splitDomains/checkpoint-2.pth
[2023-09-20 14:52:51 4splitDomains](mytrainer.py 48): INFO => Load Done
[2023-09-20 14:52:56 4splitDomains](iBatchLearn.py 57): INFO ModelSPG(
  (feature_extractor): IncreResNet(
    (conv1): SPG(
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    )
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (layer1.0.conv1): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.0.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.downsample.0): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.1.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.2.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv1): SPG(
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer2.0.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.downsample.0): SPG(
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer2.1.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.1.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.1.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.2.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.3.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv1): SPG(
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer3.0.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.downsample.0): SPG(
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer3.1.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.1.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.1.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.2.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.3.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.4.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.5.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv1): SPG(
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer4.0.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.downsample.0): SPG(
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer4.1.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.1.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.1.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.2.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (classifier): SPGClassifier(
    (last): ModuleDict(
      (All): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=60, bias=False)
      )
    )
  )
)
[2023-09-20 14:52:56 4splitDomains](iBatchLearn.py 58): INFO #parameter of model:23630972
[2023-09-20 14:52:56 4splitDomains](iBatchLearn.py 167): INFO test split name:0
[2023-09-20 14:52:59 4splitDomains](iBatchLearn.py 167): INFO test split name:1
[2023-09-20 14:53:02 4splitDomains](iBatchLearn.py 167): INFO test split name:2
--------------------------------Official Evaluation--------------------------------
2 73.65984949669254
=> merge config from utils/user_4splitDomains.yaml
=> merge config from ../official_eva/configs/4splitDomains.yaml
[2023-09-20 14:53:15 4splitDomains](iBatchLearn.py 230): INFO Full config saved to outputs/4splitDomains/mytrainer-MyTrainer-2023-09-20-14:52:16/config.json
[2023-09-20 14:53:15 4splitDomains](iBatchLearn.py 232): INFO AGENT:
  FIX_BN: false
  FIX_HEAD: true
  MODEL_NAME: resnet50
  MODEL_TYPE: resnet
  NAME: MyTrainer
  REG_COEF: 0.1
  TYPE: mytrainer
DATASET:
  BATCHSIZE: 64
  NAME: 4splitDomains
  NUM_CLASSES: 60
  NUM_TASKS: 4
  NUM_WORKERS: 4
  ROOT: input/contest_data/4splitDomains
DOMAIN_INCR: true
GPUID:
- 0
LOGGER_PATH: outputs/4splitDomains/mytrainer-MyTrainer-2023-09-20-14:52:16
OPT:
  GAMMA: 0.1
  LR: 0.01
  MOMENTUM: 0.9
  NAME: SGD
  SCHEDULE:
  - 200
  WEIGHT_DECAY: 0.0
  lr_factor: 3
  lr_min: 0.001
  patience_max: 4
PRINT_FREQ: 10
SEED: 0

[2023-09-20 14:53:15 4splitDomains](iBatchLearn.py 233): INFO {"cfg": "../official_eva/configs/4splitDomains.yaml", "user_cfg": "utils/user_4splitDomains.yaml", "test": true, "task_count": 3, "init_path": "input/init_models/4splitDomains.pth", "ckpt_path": "model_info/4splitDomains/checkpoint-3.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-20-14:52:16/prediction_3.pkl", "suffix": "2023-09-20-14:52:16", "distributed": false, "is_main_process": true}
[2023-09-20 14:53:15 4splitDomains](mytrainer.py 46): INFO => Load model weights: model_info/4splitDomains/checkpoint-3.pth
[2023-09-20 14:53:17 4splitDomains](mytrainer.py 48): INFO => Load Done
[2023-09-20 14:53:22 4splitDomains](iBatchLearn.py 57): INFO ModelSPG(
  (feature_extractor): IncreResNet(
    (conv1): SPG(
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    )
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (layer1.0.conv1): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.0.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.downsample.0): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.1.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.2.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv1): SPG(
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer2.0.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.downsample.0): SPG(
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer2.1.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.1.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.1.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.2.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.3.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv1): SPG(
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer3.0.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.downsample.0): SPG(
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer3.1.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.1.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.1.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.2.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.3.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.4.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.5.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv1): SPG(
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer4.0.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.downsample.0): SPG(
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer4.1.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.1.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.1.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.2.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (classifier): SPGClassifier(
    (last): ModuleDict(
      (All): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=60, bias=False)
      )
    )
  )
)
[2023-09-20 14:53:22 4splitDomains](iBatchLearn.py 58): INFO #parameter of model:23630972
[2023-09-20 14:53:22 4splitDomains](iBatchLearn.py 167): INFO test split name:0
[2023-09-20 14:53:25 4splitDomains](iBatchLearn.py 167): INFO test split name:1
[2023-09-20 14:53:27 4splitDomains](iBatchLearn.py 167): INFO test split name:2
[2023-09-20 14:53:38 4splitDomains](iBatchLearn.py 167): INFO test split name:3
--------------------------------Official Evaluation--------------------------------
3 72.22493019753264
=> merge config from utils/user_10splitTasks.yaml
=> merge config from ../official_eva/configs/10splitTasks.yaml
[2023-09-20 14:53:44 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16/config.json
[2023-09-20 14:53:44 10splitTasks](iBatchLearn.py 232): INFO AGENT:
  FIX_BN: false
  FIX_HEAD: true
  MODEL_NAME: resnet50
  MODEL_TYPE: resnet
  NAME: MyTrainer
  REG_COEF: 0.1
  TYPE: mytrainer
DATASET:
  BATCHSIZE: 64
  NAME: 10splitTasks
  NUM_CLASSES: 100
  NUM_TASKS: 10
  NUM_WORKERS: 4
  ROOT: input/contest_data/10splitTasks
DOMAIN_INCR: false
GPUID:
- 0
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16
OPT:
  GAMMA: 0.1
  LR: 0.01
  MOMENTUM: 0.9
  NAME: SGD
  SCHEDULE:
  - 200
  WEIGHT_DECAY: 0.0
  lr_factor: 3
  lr_min: 0.001
  patience_max: 4
PRINT_FREQ: 10
SEED: 0

[2023-09-20 14:53:44 10splitTasks](iBatchLearn.py 233): INFO {"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 0, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-0.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-20-14:52:16/prediction_0.pkl", "suffix": "2023-09-20-14:52:16", "distributed": false, "is_main_process": true}
[2023-09-20 14:53:45 10splitTasks](mytrainer.py 46): INFO => Load model weights: model_info/10splitTasks/checkpoint-0.pth
[2023-09-20 14:53:46 10splitTasks](mytrainer.py 48): INFO => Load Done
[2023-09-20 14:53:51 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(
  (feature_extractor): IncreResNet(
    (conv1): SPG(
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    )
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (layer1.0.conv1): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.0.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.downsample.0): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.1.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.2.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv1): SPG(
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer2.0.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.downsample.0): SPG(
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer2.1.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.1.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.1.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.2.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.3.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv1): SPG(
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer3.0.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.downsample.0): SPG(
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer3.1.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.1.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.1.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.2.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.3.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.4.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.5.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv1): SPG(
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer4.0.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.downsample.0): SPG(
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer4.1.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.1.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.1.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.2.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (classifier): SPGClassifier(
    (last): ModuleDict(
      (0): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (1): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (2): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (3): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (4): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (5): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (6): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (7): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (8): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (9): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
    )
  )
)
[2023-09-20 14:53:51 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832
[2023-09-20 14:53:51 10splitTasks](iBatchLearn.py 167): INFO test split name:0
--------------------------------Official Evaluation--------------------------------
0 81.2
=> merge config from utils/user_10splitTasks.yaml
=> merge config from ../official_eva/configs/10splitTasks.yaml
[2023-09-20 14:53:59 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16/config.json
[2023-09-20 14:53:59 10splitTasks](iBatchLearn.py 232): INFO AGENT:
  FIX_BN: false
  FIX_HEAD: true
  MODEL_NAME: resnet50
  MODEL_TYPE: resnet
  NAME: MyTrainer
  REG_COEF: 0.1
  TYPE: mytrainer
DATASET:
  BATCHSIZE: 64
  NAME: 10splitTasks
  NUM_CLASSES: 100
  NUM_TASKS: 10
  NUM_WORKERS: 4
  ROOT: input/contest_data/10splitTasks
DOMAIN_INCR: false
GPUID:
- 0
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16
OPT:
  GAMMA: 0.1
  LR: 0.01
  MOMENTUM: 0.9
  NAME: SGD
  SCHEDULE:
  - 200
  WEIGHT_DECAY: 0.0
  lr_factor: 3
  lr_min: 0.001
  patience_max: 4
PRINT_FREQ: 10
SEED: 0

[2023-09-20 14:53:59 10splitTasks](iBatchLearn.py 233): INFO {"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 1, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-1.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-20-14:52:16/prediction_1.pkl", "suffix": "2023-09-20-14:52:16", "distributed": false, "is_main_process": true}
[2023-09-20 14:53:59 10splitTasks](mytrainer.py 46): INFO => Load model weights: model_info/10splitTasks/checkpoint-1.pth
[2023-09-20 14:54:01 10splitTasks](mytrainer.py 48): INFO => Load Done
[2023-09-20 14:54:06 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(
  (feature_extractor): IncreResNet(
    (conv1): SPG(
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    )
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (layer1.0.conv1): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.0.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.downsample.0): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.1.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.2.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv1): SPG(
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer2.0.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.downsample.0): SPG(
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer2.1.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.1.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.1.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.2.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.3.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv1): SPG(
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer3.0.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.downsample.0): SPG(
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer3.1.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.1.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.1.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.2.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.3.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.4.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.5.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv1): SPG(
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer4.0.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.downsample.0): SPG(
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer4.1.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.1.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.1.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.2.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (classifier): SPGClassifier(
    (last): ModuleDict(
      (0): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (1): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (2): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (3): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (4): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (5): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (6): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (7): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (8): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (9): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
    )
  )
)
[2023-09-20 14:54:06 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832
[2023-09-20 14:54:06 10splitTasks](iBatchLearn.py 167): INFO test split name:0
[2023-09-20 14:54:10 10splitTasks](iBatchLearn.py 167): INFO test split name:1
--------------------------------Official Evaluation--------------------------------
1 58.84999999999998
=> merge config from utils/user_10splitTasks.yaml
=> merge config from ../official_eva/configs/10splitTasks.yaml
[2023-09-20 14:54:17 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16/config.json
[2023-09-20 14:54:17 10splitTasks](iBatchLearn.py 232): INFO AGENT:
  FIX_BN: false
  FIX_HEAD: true
  MODEL_NAME: resnet50
  MODEL_TYPE: resnet
  NAME: MyTrainer
  REG_COEF: 0.1
  TYPE: mytrainer
DATASET:
  BATCHSIZE: 64
  NAME: 10splitTasks
  NUM_CLASSES: 100
  NUM_TASKS: 10
  NUM_WORKERS: 4
  ROOT: input/contest_data/10splitTasks
DOMAIN_INCR: false
GPUID:
- 0
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16
OPT:
  GAMMA: 0.1
  LR: 0.01
  MOMENTUM: 0.9
  NAME: SGD
  SCHEDULE:
  - 200
  WEIGHT_DECAY: 0.0
  lr_factor: 3
  lr_min: 0.001
  patience_max: 4
PRINT_FREQ: 10
SEED: 0

[2023-09-20 14:54:17 10splitTasks](iBatchLearn.py 233): INFO {"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 2, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-2.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-20-14:52:16/prediction_2.pkl", "suffix": "2023-09-20-14:52:16", "distributed": false, "is_main_process": true}
[2023-09-20 14:54:18 10splitTasks](mytrainer.py 46): INFO => Load model weights: model_info/10splitTasks/checkpoint-2.pth
[2023-09-20 14:54:19 10splitTasks](mytrainer.py 48): INFO => Load Done
[2023-09-20 14:54:24 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(
  (feature_extractor): IncreResNet(
    (conv1): SPG(
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    )
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (layer1.0.conv1): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.0.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.downsample.0): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.1.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.2.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv1): SPG(
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer2.0.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.downsample.0): SPG(
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer2.1.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.1.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.1.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.2.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.3.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv1): SPG(
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer3.0.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.downsample.0): SPG(
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer3.1.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.1.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.1.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.2.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.3.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.4.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.5.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv1): SPG(
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer4.0.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.downsample.0): SPG(
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer4.1.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.1.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.1.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.2.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (classifier): SPGClassifier(
    (last): ModuleDict(
      (0): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (1): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (2): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (3): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (4): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (5): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (6): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (7): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (8): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (9): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
    )
  )
)
[2023-09-20 14:54:24 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832
[2023-09-20 14:54:24 10splitTasks](iBatchLearn.py 167): INFO test split name:0
[2023-09-20 14:54:28 10splitTasks](iBatchLearn.py 167): INFO test split name:1
[2023-09-20 14:54:32 10splitTasks](iBatchLearn.py 167): INFO test split name:2
--------------------------------Official Evaluation--------------------------------
2 55.43333333333334
=> merge config from utils/user_10splitTasks.yaml
=> merge config from ../official_eva/configs/10splitTasks.yaml
[2023-09-20 14:54:39 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16/config.json
[2023-09-20 14:54:39 10splitTasks](iBatchLearn.py 232): INFO AGENT:
  FIX_BN: false
  FIX_HEAD: true
  MODEL_NAME: resnet50
  MODEL_TYPE: resnet
  NAME: MyTrainer
  REG_COEF: 0.1
  TYPE: mytrainer
DATASET:
  BATCHSIZE: 64
  NAME: 10splitTasks
  NUM_CLASSES: 100
  NUM_TASKS: 10
  NUM_WORKERS: 4
  ROOT: input/contest_data/10splitTasks
DOMAIN_INCR: false
GPUID:
- 0
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16
OPT:
  GAMMA: 0.1
  LR: 0.01
  MOMENTUM: 0.9
  NAME: SGD
  SCHEDULE:
  - 200
  WEIGHT_DECAY: 0.0
  lr_factor: 3
  lr_min: 0.001
  patience_max: 4
PRINT_FREQ: 10
SEED: 0

[2023-09-20 14:54:39 10splitTasks](iBatchLearn.py 233): INFO {"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 3, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-3.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-20-14:52:16/prediction_3.pkl", "suffix": "2023-09-20-14:52:16", "distributed": false, "is_main_process": true}
[2023-09-20 14:54:40 10splitTasks](mytrainer.py 46): INFO => Load model weights: model_info/10splitTasks/checkpoint-3.pth
[2023-09-20 14:54:41 10splitTasks](mytrainer.py 48): INFO => Load Done
[2023-09-20 14:54:46 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(
  (feature_extractor): IncreResNet(
    (conv1): SPG(
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    )
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (layer1.0.conv1): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.0.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.downsample.0): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.1.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.2.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv1): SPG(
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer2.0.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.downsample.0): SPG(
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer2.1.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.1.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.1.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.2.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.3.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv1): SPG(
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer3.0.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.downsample.0): SPG(
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer3.1.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.1.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.1.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.2.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.3.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.4.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.5.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv1): SPG(
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer4.0.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.downsample.0): SPG(
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer4.1.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.1.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.1.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.2.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (classifier): SPGClassifier(
    (last): ModuleDict(
      (0): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (1): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (2): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (3): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (4): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (5): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (6): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (7): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (8): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (9): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
    )
  )
)
[2023-09-20 14:54:46 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832
[2023-09-20 14:54:46 10splitTasks](iBatchLearn.py 167): INFO test split name:0
[2023-09-20 14:54:50 10splitTasks](iBatchLearn.py 167): INFO test split name:1
[2023-09-20 14:54:54 10splitTasks](iBatchLearn.py 167): INFO test split name:2
[2023-09-20 14:54:58 10splitTasks](iBatchLearn.py 167): INFO test split name:3
--------------------------------Official Evaluation--------------------------------
3 50.775000000000006
=> merge config from utils/user_10splitTasks.yaml
=> merge config from ../official_eva/configs/10splitTasks.yaml
[2023-09-20 14:55:05 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16/config.json
[2023-09-20 14:55:05 10splitTasks](iBatchLearn.py 232): INFO AGENT:
  FIX_BN: false
  FIX_HEAD: true
  MODEL_NAME: resnet50
  MODEL_TYPE: resnet
  NAME: MyTrainer
  REG_COEF: 0.1
  TYPE: mytrainer
DATASET:
  BATCHSIZE: 64
  NAME: 10splitTasks
  NUM_CLASSES: 100
  NUM_TASKS: 10
  NUM_WORKERS: 4
  ROOT: input/contest_data/10splitTasks
DOMAIN_INCR: false
GPUID:
- 0
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16
OPT:
  GAMMA: 0.1
  LR: 0.01
  MOMENTUM: 0.9
  NAME: SGD
  SCHEDULE:
  - 200
  WEIGHT_DECAY: 0.0
  lr_factor: 3
  lr_min: 0.001
  patience_max: 4
PRINT_FREQ: 10
SEED: 0

[2023-09-20 14:55:05 10splitTasks](iBatchLearn.py 233): INFO {"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 4, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-4.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-20-14:52:16/prediction_4.pkl", "suffix": "2023-09-20-14:52:16", "distributed": false, "is_main_process": true}
[2023-09-20 14:55:06 10splitTasks](mytrainer.py 46): INFO => Load model weights: model_info/10splitTasks/checkpoint-4.pth
[2023-09-20 14:55:07 10splitTasks](mytrainer.py 48): INFO => Load Done
[2023-09-20 14:55:12 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(
  (feature_extractor): IncreResNet(
    (conv1): SPG(
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    )
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (layer1.0.conv1): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.0.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.downsample.0): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.1.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.2.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv1): SPG(
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer2.0.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.downsample.0): SPG(
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer2.1.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.1.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.1.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.2.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.3.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv1): SPG(
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer3.0.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.downsample.0): SPG(
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer3.1.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.1.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.1.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.2.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.3.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.4.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.5.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv1): SPG(
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer4.0.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.downsample.0): SPG(
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer4.1.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.1.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.1.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.2.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (classifier): SPGClassifier(
    (last): ModuleDict(
      (0): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (1): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (2): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (3): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (4): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (5): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (6): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (7): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (8): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (9): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
    )
  )
)
[2023-09-20 14:55:12 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832
[2023-09-20 14:55:12 10splitTasks](iBatchLearn.py 167): INFO test split name:0
[2023-09-20 14:55:16 10splitTasks](iBatchLearn.py 167): INFO test split name:1
[2023-09-20 14:55:20 10splitTasks](iBatchLearn.py 167): INFO test split name:2
[2023-09-20 14:55:24 10splitTasks](iBatchLearn.py 167): INFO test split name:3
[2023-09-20 14:55:28 10splitTasks](iBatchLearn.py 167): INFO test split name:4
--------------------------------Official Evaluation--------------------------------
4 53.61500000000001
=> merge config from utils/user_10splitTasks.yaml
=> merge config from ../official_eva/configs/10splitTasks.yaml
[2023-09-20 14:55:35 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16/config.json
[2023-09-20 14:55:35 10splitTasks](iBatchLearn.py 232): INFO AGENT:
  FIX_BN: false
  FIX_HEAD: true
  MODEL_NAME: resnet50
  MODEL_TYPE: resnet
  NAME: MyTrainer
  REG_COEF: 0.1
  TYPE: mytrainer
DATASET:
  BATCHSIZE: 64
  NAME: 10splitTasks
  NUM_CLASSES: 100
  NUM_TASKS: 10
  NUM_WORKERS: 4
  ROOT: input/contest_data/10splitTasks
DOMAIN_INCR: false
GPUID:
- 0
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16
OPT:
  GAMMA: 0.1
  LR: 0.01
  MOMENTUM: 0.9
  NAME: SGD
  SCHEDULE:
  - 200
  WEIGHT_DECAY: 0.0
  lr_factor: 3
  lr_min: 0.001
  patience_max: 4
PRINT_FREQ: 10
SEED: 0

[2023-09-20 14:55:35 10splitTasks](iBatchLearn.py 233): INFO {"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 5, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-5.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-20-14:52:16/prediction_5.pkl", "suffix": "2023-09-20-14:52:16", "distributed": false, "is_main_process": true}
[2023-09-20 14:55:36 10splitTasks](mytrainer.py 46): INFO => Load model weights: model_info/10splitTasks/checkpoint-5.pth
[2023-09-20 14:55:37 10splitTasks](mytrainer.py 48): INFO => Load Done
[2023-09-20 14:55:42 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(
  (feature_extractor): IncreResNet(
    (conv1): SPG(
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    )
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (layer1.0.conv1): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.0.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.downsample.0): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.1.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.2.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv1): SPG(
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer2.0.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.downsample.0): SPG(
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer2.1.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.1.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.1.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.2.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.3.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv1): SPG(
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer3.0.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.downsample.0): SPG(
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer3.1.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.1.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.1.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.2.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.3.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.4.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.5.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv1): SPG(
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer4.0.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.downsample.0): SPG(
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer4.1.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.1.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.1.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.2.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (classifier): SPGClassifier(
    (last): ModuleDict(
      (0): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (1): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (2): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (3): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (4): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (5): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (6): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (7): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (8): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (9): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
    )
  )
)
[2023-09-20 14:55:42 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832
[2023-09-20 14:55:42 10splitTasks](iBatchLearn.py 167): INFO test split name:0
[2023-09-20 14:55:46 10splitTasks](iBatchLearn.py 167): INFO test split name:1
[2023-09-20 14:55:50 10splitTasks](iBatchLearn.py 167): INFO test split name:2
[2023-09-20 14:55:54 10splitTasks](iBatchLearn.py 167): INFO test split name:3
[2023-09-20 14:55:58 10splitTasks](iBatchLearn.py 167): INFO test split name:4
[2023-09-20 14:56:02 10splitTasks](iBatchLearn.py 167): INFO test split name:5
--------------------------------Official Evaluation--------------------------------
5 50.398616834991564
=> merge config from utils/user_10splitTasks.yaml
=> merge config from ../official_eva/configs/10splitTasks.yaml
[2023-09-20 14:56:09 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16/config.json
[2023-09-20 14:56:09 10splitTasks](iBatchLearn.py 232): INFO AGENT:
  FIX_BN: false
  FIX_HEAD: true
  MODEL_NAME: resnet50
  MODEL_TYPE: resnet
  NAME: MyTrainer
  REG_COEF: 0.1
  TYPE: mytrainer
DATASET:
  BATCHSIZE: 64
  NAME: 10splitTasks
  NUM_CLASSES: 100
  NUM_TASKS: 10
  NUM_WORKERS: 4
  ROOT: input/contest_data/10splitTasks
DOMAIN_INCR: false
GPUID:
- 0
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16
OPT:
  GAMMA: 0.1
  LR: 0.01
  MOMENTUM: 0.9
  NAME: SGD
  SCHEDULE:
  - 200
  WEIGHT_DECAY: 0.0
  lr_factor: 3
  lr_min: 0.001
  patience_max: 4
PRINT_FREQ: 10
SEED: 0

[2023-09-20 14:56:09 10splitTasks](iBatchLearn.py 233): INFO {"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 6, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-6.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-20-14:52:16/prediction_6.pkl", "suffix": "2023-09-20-14:52:16", "distributed": false, "is_main_process": true}
[2023-09-20 14:56:09 10splitTasks](mytrainer.py 46): INFO => Load model weights: model_info/10splitTasks/checkpoint-6.pth
[2023-09-20 14:56:11 10splitTasks](mytrainer.py 48): INFO => Load Done
[2023-09-20 14:56:16 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(
  (feature_extractor): IncreResNet(
    (conv1): SPG(
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    )
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (layer1.0.conv1): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.0.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.downsample.0): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.1.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.2.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv1): SPG(
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer2.0.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.downsample.0): SPG(
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer2.1.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.1.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.1.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.2.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.3.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv1): SPG(
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer3.0.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.downsample.0): SPG(
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer3.1.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.1.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.1.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.2.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.3.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.4.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.5.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv1): SPG(
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer4.0.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.downsample.0): SPG(
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer4.1.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.1.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.1.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.2.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (classifier): SPGClassifier(
    (last): ModuleDict(
      (0): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (1): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (2): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (3): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (4): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (5): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (6): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (7): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (8): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (9): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
    )
  )
)
[2023-09-20 14:56:16 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832
[2023-09-20 14:56:16 10splitTasks](iBatchLearn.py 167): INFO test split name:0
[2023-09-20 14:56:20 10splitTasks](iBatchLearn.py 167): INFO test split name:1
[2023-09-20 14:56:24 10splitTasks](iBatchLearn.py 167): INFO test split name:2
[2023-09-20 14:56:28 10splitTasks](iBatchLearn.py 167): INFO test split name:3
[2023-09-20 14:56:32 10splitTasks](iBatchLearn.py 167): INFO test split name:4
[2023-09-20 14:56:36 10splitTasks](iBatchLearn.py 167): INFO test split name:5
[2023-09-20 14:56:40 10splitTasks](iBatchLearn.py 167): INFO test split name:6
--------------------------------Official Evaluation--------------------------------
6 42.92037262099857
=> merge config from utils/user_10splitTasks.yaml
=> merge config from ../official_eva/configs/10splitTasks.yaml
[2023-09-20 14:56:49 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16/config.json
[2023-09-20 14:56:49 10splitTasks](iBatchLearn.py 232): INFO AGENT:
  FIX_BN: false
  FIX_HEAD: true
  MODEL_NAME: resnet50
  MODEL_TYPE: resnet
  NAME: MyTrainer
  REG_COEF: 0.1
  TYPE: mytrainer
DATASET:
  BATCHSIZE: 64
  NAME: 10splitTasks
  NUM_CLASSES: 100
  NUM_TASKS: 10
  NUM_WORKERS: 4
  ROOT: input/contest_data/10splitTasks
DOMAIN_INCR: false
GPUID:
- 0
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16
OPT:
  GAMMA: 0.1
  LR: 0.01
  MOMENTUM: 0.9
  NAME: SGD
  SCHEDULE:
  - 200
  WEIGHT_DECAY: 0.0
  lr_factor: 3
  lr_min: 0.001
  patience_max: 4
PRINT_FREQ: 10
SEED: 0

[2023-09-20 14:56:49 10splitTasks](iBatchLearn.py 233): INFO {"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 7, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-7.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-20-14:52:16/prediction_7.pkl", "suffix": "2023-09-20-14:52:16", "distributed": false, "is_main_process": true}
[2023-09-20 14:56:49 10splitTasks](mytrainer.py 46): INFO => Load model weights: model_info/10splitTasks/checkpoint-7.pth
[2023-09-20 14:56:51 10splitTasks](mytrainer.py 48): INFO => Load Done
[2023-09-20 14:56:56 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(
  (feature_extractor): IncreResNet(
    (conv1): SPG(
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    )
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (layer1.0.conv1): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.0.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.downsample.0): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.1.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.2.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv1): SPG(
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer2.0.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.downsample.0): SPG(
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer2.1.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.1.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.1.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.2.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.3.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv1): SPG(
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer3.0.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.downsample.0): SPG(
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer3.1.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.1.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.1.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.2.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.3.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.4.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.5.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv1): SPG(
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer4.0.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.downsample.0): SPG(
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer4.1.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.1.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.1.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.2.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (classifier): SPGClassifier(
    (last): ModuleDict(
      (0): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (1): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (2): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (3): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (4): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (5): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (6): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (7): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (8): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (9): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
    )
  )
)
[2023-09-20 14:56:56 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832
[2023-09-20 14:56:56 10splitTasks](iBatchLearn.py 167): INFO test split name:0
[2023-09-20 14:57:00 10splitTasks](iBatchLearn.py 167): INFO test split name:1
[2023-09-20 14:57:05 10splitTasks](iBatchLearn.py 167): INFO test split name:2
[2023-09-20 14:57:10 10splitTasks](iBatchLearn.py 167): INFO test split name:3
[2023-09-20 14:57:14 10splitTasks](iBatchLearn.py 167): INFO test split name:4
[2023-09-20 14:57:18 10splitTasks](iBatchLearn.py 167): INFO test split name:5
[2023-09-20 14:57:23 10splitTasks](iBatchLearn.py 167): INFO test split name:6
[2023-09-20 14:57:29 10splitTasks](iBatchLearn.py 167): INFO test split name:7
--------------------------------Official Evaluation--------------------------------
7 50.64879473741863
=> merge config from utils/user_10splitTasks.yaml
=> merge config from ../official_eva/configs/10splitTasks.yaml
[2023-09-20 14:57:38 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16/config.json
[2023-09-20 14:57:38 10splitTasks](iBatchLearn.py 232): INFO AGENT:
  FIX_BN: false
  FIX_HEAD: true
  MODEL_NAME: resnet50
  MODEL_TYPE: resnet
  NAME: MyTrainer
  REG_COEF: 0.1
  TYPE: mytrainer
DATASET:
  BATCHSIZE: 64
  NAME: 10splitTasks
  NUM_CLASSES: 100
  NUM_TASKS: 10
  NUM_WORKERS: 4
  ROOT: input/contest_data/10splitTasks
DOMAIN_INCR: false
GPUID:
- 0
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16
OPT:
  GAMMA: 0.1
  LR: 0.01
  MOMENTUM: 0.9
  NAME: SGD
  SCHEDULE:
  - 200
  WEIGHT_DECAY: 0.0
  lr_factor: 3
  lr_min: 0.001
  patience_max: 4
PRINT_FREQ: 10
SEED: 0

[2023-09-20 14:57:38 10splitTasks](iBatchLearn.py 233): INFO {"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 8, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-8.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-20-14:52:16/prediction_8.pkl", "suffix": "2023-09-20-14:52:16", "distributed": false, "is_main_process": true}
[2023-09-20 14:57:38 10splitTasks](mytrainer.py 46): INFO => Load model weights: model_info/10splitTasks/checkpoint-8.pth
[2023-09-20 14:57:40 10splitTasks](mytrainer.py 48): INFO => Load Done
[2023-09-20 14:57:44 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(
  (feature_extractor): IncreResNet(
    (conv1): SPG(
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    )
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (layer1.0.conv1): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.0.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.downsample.0): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.1.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.2.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv1): SPG(
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer2.0.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.downsample.0): SPG(
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer2.1.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.1.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.1.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.2.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.3.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv1): SPG(
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer3.0.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.downsample.0): SPG(
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer3.1.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.1.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.1.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.2.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.3.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.4.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.5.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv1): SPG(
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer4.0.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.downsample.0): SPG(
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer4.1.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.1.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.1.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.2.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (classifier): SPGClassifier(
    (last): ModuleDict(
      (0): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (1): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (2): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (3): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (4): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (5): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (6): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (7): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (8): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (9): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
    )
  )
)
[2023-09-20 14:57:44 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832
[2023-09-20 14:57:44 10splitTasks](iBatchLearn.py 167): INFO test split name:0
[2023-09-20 14:57:50 10splitTasks](iBatchLearn.py 167): INFO test split name:1
[2023-09-20 14:57:55 10splitTasks](iBatchLearn.py 167): INFO test split name:2
[2023-09-20 14:58:00 10splitTasks](iBatchLearn.py 167): INFO test split name:3
[2023-09-20 14:58:05 10splitTasks](iBatchLearn.py 167): INFO test split name:4
[2023-09-20 14:58:09 10splitTasks](iBatchLearn.py 167): INFO test split name:5
[2023-09-20 14:58:14 10splitTasks](iBatchLearn.py 167): INFO test split name:6
[2023-09-20 14:58:19 10splitTasks](iBatchLearn.py 167): INFO test split name:7
[2023-09-20 14:58:23 10splitTasks](iBatchLearn.py 167): INFO test split name:8
--------------------------------Official Evaluation--------------------------------
8 52.121264809139944
=> merge config from utils/user_10splitTasks.yaml
=> merge config from ../official_eva/configs/10splitTasks.yaml
[2023-09-20 14:58:30 10splitTasks](iBatchLearn.py 230): INFO Full config saved to outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16/config.json
[2023-09-20 14:58:30 10splitTasks](iBatchLearn.py 232): INFO AGENT:
  FIX_BN: false
  FIX_HEAD: true
  MODEL_NAME: resnet50
  MODEL_TYPE: resnet
  NAME: MyTrainer
  REG_COEF: 0.1
  TYPE: mytrainer
DATASET:
  BATCHSIZE: 64
  NAME: 10splitTasks
  NUM_CLASSES: 100
  NUM_TASKS: 10
  NUM_WORKERS: 4
  ROOT: input/contest_data/10splitTasks
DOMAIN_INCR: false
GPUID:
- 0
LOGGER_PATH: outputs/10splitTasks/mytrainer-MyTrainer-2023-09-20-14:52:16
OPT:
  GAMMA: 0.1
  LR: 0.01
  MOMENTUM: 0.9
  NAME: SGD
  SCHEDULE:
  - 200
  WEIGHT_DECAY: 0.0
  lr_factor: 3
  lr_min: 0.001
  patience_max: 4
PRINT_FREQ: 10
SEED: 0

[2023-09-20 14:58:30 10splitTasks](iBatchLearn.py 233): INFO {"cfg": "../official_eva/configs/10splitTasks.yaml", "user_cfg": "utils/user_10splitTasks.yaml", "test": true, "task_count": 9, "init_path": "input/init_models/10splitTasks.pth", "ckpt_path": "model_info/10splitTasks/checkpoint-9.pth", "save_ckpt_path": null, "storage_path": null, "save_storage_path": null, "dest_path": "outputs/2023-09-20-14:52:16/prediction_9.pkl", "suffix": "2023-09-20-14:52:16", "distributed": false, "is_main_process": true}
[2023-09-20 14:58:31 10splitTasks](mytrainer.py 46): INFO => Load model weights: model_info/10splitTasks/checkpoint-9.pth
[2023-09-20 14:58:32 10splitTasks](mytrainer.py 48): INFO => Load Done
[2023-09-20 14:58:37 10splitTasks](iBatchLearn.py 57): INFO ModelSPG(
  (feature_extractor): IncreResNet(
    (conv1): SPG(
      (target_module): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    )
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (layer1.0.conv1): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.0.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.0.downsample.0): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.1.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.1.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv1): SPG(
      (target_module): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer1.2.conv2): SPG(
      (target_module): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer1.2.conv3): SPG(
      (target_module): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv1): SPG(
      (target_module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer2.0.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.0.downsample.0): SPG(
      (target_module): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer2.1.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.1.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.1.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.2.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.2.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv1): SPG(
      (target_module): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer2.3.conv2): SPG(
      (target_module): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer2.3.conv3): SPG(
      (target_module): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv1): SPG(
      (target_module): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer3.0.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.0.downsample.0): SPG(
      (target_module): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer3.1.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.1.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.1.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.2.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.2.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.3.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.3.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.4.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.4.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv1): SPG(
      (target_module): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer3.5.conv2): SPG(
      (target_module): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer3.5.conv3): SPG(
      (target_module): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv1): SPG(
      (target_module): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    )
    (layer4.0.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.0.downsample.0): SPG(
      (target_module): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
    )
    (layer4.1.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.1.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.1.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv1): SPG(
      (target_module): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (layer4.2.conv2): SPG(
      (target_module): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (layer4.2.conv3): SPG(
      (target_module): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (classifier): SPGClassifier(
    (last): ModuleDict(
      (0): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (1): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (2): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (3): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (4): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (5): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (6): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (7): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (8): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
      (9): _TaskHead(
        (classifier): Linear(in_features=2048, out_features=10, bias=False)
      )
    )
  )
)
[2023-09-20 14:58:37 10splitTasks](iBatchLearn.py 58): INFO #parameter of model:23712832
[2023-09-20 14:58:37 10splitTasks](iBatchLearn.py 167): INFO test split name:0
[2023-09-20 14:58:41 10splitTasks](iBatchLearn.py 167): INFO test split name:1
[2023-09-20 14:58:45 10splitTasks](iBatchLearn.py 167): INFO test split name:2
[2023-09-20 14:58:49 10splitTasks](iBatchLearn.py 167): INFO test split name:3
[2023-09-20 14:58:53 10splitTasks](iBatchLearn.py 167): INFO test split name:4
[2023-09-20 14:58:57 10splitTasks](iBatchLearn.py 167): INFO test split name:5
[2023-09-20 14:59:01 10splitTasks](iBatchLearn.py 167): INFO test split name:6
[2023-09-20 14:59:05 10splitTasks](iBatchLearn.py 167): INFO test split name:7
[2023-09-20 14:59:08 10splitTasks](iBatchLearn.py 167): INFO test split name:8
[2023-09-20 14:59:12 10splitTasks](iBatchLearn.py 167): INFO test split name:9
--------------------------------Official Evaluation--------------------------------
9 50.07436946524254
--------------------------------Final Official Evaluation--------------------------------
61.14964983138759
